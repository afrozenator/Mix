#ifndef __OP_CODE_H__
#define __OP_CODE_H__

#include <assert.h>

#include "register.h"

namespace mix {

class Operations {
 public:
  // TODO(afrozm): This should be ordered on |c| and then on |f|.
	enum OpCode {
		NOP,
		ADD ,
		SUB ,
		MUL ,
		DIV ,
		NUM ,
		CHAR,
		HLT ,
		SLA,
		SRA,
		SLAX,
		SRAX,
		SLC,
		SRC,
		MOVE,
		LDA ,
		LD1 ,
		LD2 ,
		LD3 ,
		LD4 ,
		LD5 ,
		LD6 ,
		LDX ,
		LDAN,
		LD1N,
		LD2N,
		LD3N,
		LD4N,
		LD5N,
		LD6N,
		LDXN,
		STA ,
		ST1,
		ST2,
		ST3,
		ST4,
		ST5,
		ST6,
		STX ,
		STJ ,
		STZ ,
		JBUS,
		IOC,
		IN,
		OUT,
		JRED,
		JMP,
		JSJ,
		JOV,
		JNOV,
		JL,
		JE,
		JG,
		JGE,
		JNE,
		JLE,
		JAN,
		JAZ,
		JAP,
		JANN,
		JANZ,
		JANP,
		J1N,
		J1Z,
		J1P,
		J1NN,
		J1NZ,
		J1NP,
		J2N,
		J2Z,
		J2P,
		J2NN,
		J2NZ,
		J2NP,
		J3N,
		J3Z,
		J3P,
		J3NN,
		J3NZ,
		J3NP,
		J4N,
		J4Z,
		J4P,
		J4NN,
		J4NZ,
		J4NP,
		J5N,
		J5Z,
		J5P,
		J5NN,
		J5NZ,
		J5NP,
		J6N,
		J6Z,
		J6P,
		J6NN,
		J6NZ,
		J6NP,
		JXN,
		JXZ,
		JXP,
		JXNN,
		JXNZ,
		JXNP,
		INCA,
		DECA,
		ENTA,
		ENNA,
		INC1,
		DEC1,
		ENT1,
		ENN1,
		INC2,
		DEC2,
		ENT2,
		ENN2,
		INC3,
		DEC3,
		ENT3,
		ENN3,
		INC4,
		DEC4,
		ENT4,
		ENN4,
		INC5,
		DEC5,
		ENT5,
		ENN5,
		INC6,
		DEC6,
		ENT6,
		ENN6,
		INCX,
		DECX,
		ENTX,
		ENNX,
		CMPA,
		CMP1,
		CMP2,
		CMP3,
		CMP4,
		CMP5,
		CMP6,
		CMPX,
	  NUM_OPS,
	};
	struct Op {
		uint32_t c_;
		uint32_t f_;
		OpCode op_code_;
		const char* op_name_;
		Registers registers_;
	};
	static const Op* op(OpCode idx) {
		assert(operations_[idx].op_code_ == idx);
		return operations_ + idx;
	}
	static const Op* op(uint32_t c, uint32_t f);
 private:
	static Op operations_[NUM_OPS];
};

}  // namespace mix

#endif // __OP_CODE_H__
